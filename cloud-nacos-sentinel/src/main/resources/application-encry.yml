server:
  port: 3344

# 当将 Spring Cloud 配置文件存放在公共环境时（如 github），可以使用其自身的加解密环境，对配置信息进行加密再存储。但是该环境需
# 要安装 Java Cryptography Extension（JCE），地址是 https://www.oracle.com/java/technologies/javase-jce8-downloads.html。
# 下载 JCE 压缩包后解压，它包含两个策略文件 jar 包（即加密和解密）。将这两个文件替换到 JDK 安装目录--jre--lib--security 这个
# 目录中，即可。

# 使用对称加密，配置以下代码即可：
encrypt:
  key: hymanencry

# 加密时，使用 POST 方式访问本服务 IP:PORT/encrypt -d 明文（例如 microservice-config-server），则它会输出密文（即使用 hymanencry
# 作为密钥对明文进行对称式加密）。解密时，访问本服务 IP:PORT/decrypt -d 密文，则它就会输出对应的明文（microservice-config-server）。
# 具体使用时，使用访问的方式获取到数据的密文，然后再配置在配置文件中即可。例如 microservice-config-server 的密文是 abcdefg。
spring:
  application:
    name: '{cipher}abcdefg'

# 则配置信息存储在网上时，就是 name 后面加密的值。但在 SpringCloudconfig 服务正常调用时，会自动解密。访问 localhost:3344/application-encry.yml，
# 即可看到解密后的明文。并且只需要配置 server 端即可，client 端不需要任何改动。
# 需要注意的是，如果是使用 yml 文件则是这样写。如果是使用 properties 文件，则需要写成 name={cipher}abcdefg，不能加单引号，否
# 则服务不能正常解密。


# 使用非对称加密，创建用于测试的密钥库。首先在某一目录下执行以下命令，成功后会在该目录下生成一个 server.jks 文件：
# keytool -genkeypair -alias mytestkey -keyalg RSA -dname "CN=Web Server,OU=Unit,O=Organization,L=City,S=State,C=US"
# -keypass changeme -keystore server.jks -storepass letmein

# 使用 keytool [-genkeypair] -help 查看帮助信息：
#  keytool -help       密钥和证书管理工具，有以下命令：
#  -certreq            生成证书请求
#  -changealias        更改条目的别名
#  -delete             删除条目
#  -exportcert         导出证书
#  -genkeypair         生成密钥对
#  -genseckey          生成密钥
#  -gencert            根据证书请求生成证书
#  -importcert         导入证书或证书链
#  -importpass         导入口令
#  -importkeystore     从其他密钥库导入一个或所有条目
#  -keypasswd          更改条目的密钥口令
#  -list               列出密钥库中的条目
#  -printcert          打印证书内容
#  -printcertreq       打印证书请求的内容
#  -printcrl           打印 CRL 文件的内容
#  -storepasswd        更改密钥库的存储口令

#  keytool -genkeypair [OPTION]...  生成密钥对，有以下选项:
#  -alias <alias>                  要处理的条目的别名
#  -keyalg <keyalg>                密钥算法名称
#  -keysize <keysize>              密钥位大小
#  -sigalg <sigalg>                签名算法名称
#  -destalias <destalias>          目标别名
#  -dname <dname>                  唯一判别名
#  -startdate <startdate>          证书有效期开始日期/时间
#  -ext <value>                    X.509 扩展
#  -validity <valDays>             有效天数
#  -keypass <arg>                  密钥口令，即私钥密码
#  -keystore <keystore>            密钥库名称
#  -storepass <arg>                密钥库口令
#  -storetype <storetype>          密钥库类型
#  -providername <providername>    提供方名称
#  -providerclass <providerclass>  提供方类名
#  -providerarg <arg>              提供方参数
#  -providerpath <pathlist>        提供方类路径
#  -v                              详细输出
#  -protected                      通过受保护的机制的口令

# 其中 -dname 参数的值为：CN是姓名与姓氏，OU是组织单位名称，O是组织名，L是城市名，S是省市自治区名，C是国家地区代码。

# 并且要注意，在使用JDK 11或更高版本时，使用该可能会收到以下警告。此时就需要确保 keypass 和 storepass 的值匹配。
# Warning: Different store and key passwords not supported for PKCS12 KeyStores. Ignoring user-specified -keypass value.
# 最后，将 server.jks 文件放在 resources 路径下，然后在 bootstrap.yml 中为配置服务器创建以下设置：
encrypt:
  keyStore:
    location: classpath:/server.jks
    password: letmein
    alias: mytestkey
    secret: changeme

# 加密的方法和对称加密的方式相同，使用 POST 方式访问本服务 IP:PORT/encrypt -d 明文，会输出密文。解密时访问 IP:PORT/decrypt -d 密文，
# 会输出对应的明文。
