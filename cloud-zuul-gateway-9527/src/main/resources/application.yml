server:
  port: 9527
  servlet:
    context-path: /myzuul

spring:
  application:
    # 这个名字很重要，是注册到注册中心必须用到的，也是服务发现时用到的名字
    name: microservice-zuul-gateway

eureka:
  # 客户端注册进 eureka 服务列表内
  client:
    service-url:
      # 集群版，同时有多个注册中心时
      defaultZone: http://admin:admin@eureka7001:7001/eureka/,http://eureka7002:7002/eureka/,http://eureka7003:7003/eureka/
  instance:
    # 自定义在注册中心页面显示的微服务的名称
    instance-id: zuul-gateway-9527
    # 设置显示微服务名称链接的访问路径 IP 地址
    prefer-ip-address: true

    # 当配置了该属性时（但并没有配置下面的 management.port），则在访问 /hystrix.stream 时需要配置上 instanceUrlSuffix 属性。
    home-page-url-path: /myzuul

    # Turbine 默认是在 Eureka 中查找其主机名和端口项，然后将 /hystrix.stream 附加到已注册实例上，来查找 /hystrix.stream 端点。
    # 如果实例的元数据 metadata-map 包含 management.port，则需要使用它来代替 /hystrix.stream 端点的端口值。即就不用配置 instanceUrlSuffix
    # 属性了。
    # management.port 称作管理端口，它可以使得应用具有两个端口。一个正常访问端口 9527，一个管理端口 9500（包括 hystrix，actuator）。
    metadata-map:
      management.port: ${management.port:9500}


# 自定义显示项目的描述信息，需要注意，要在父工程中进行资源访问的配置（resources 标签加 maven-resources-plugin 插件）
info:
  service:
    name: hyman-microservicecloud
    ipname: www.hyman.com
  build:
    artifactId: @project.artifactId@
    version: @project.version@
    description: @project.description@

# 开启路由映射，隐藏真实的请求路径
zuul:
  routes:
    # 处理来自旧端点的客户端的所有通信，但是可以将一些请求重定向到新端点
    first:
      path: /first/**
      url: https://first.example.com
      second:
        path: /second/**
        url: forward:/second
      third:
        path: /third/**
        url: forward:/3rd
      legacy:
        path: /**
        url: https://legacy.example.com

    # 指定一个唯一标识符（每个服务唯一），可以是任意值。请求时路径为 zuulIP:port//dept/微服务路径
    mydept:
      serviceId: microservice-provider-dept
      path: /dept/**

    # 后端的位置可以指定为 serviceId（eureka 发现的服务）或 url（用于物理位置），如下例所示：
    myconsumer:
      # 对应到 microservice-consumer-dept 其中的一个服务实例，且只能是一个，即也不能使用 robbin 负载了
      url: https://127.0.0.1:8080/
      path: /dept/**

  # 禁止使用某个服务的真实路径（application-name）进行访问
  # ignored-services: microservice-provider-dept
  # 禁止使用所有服务的真实路径（application-name）进行访问
  ignored-services: "*"
  # 禁止使用所有指定路径的访问
  ignored-patterns: "/**/admin/**"

  # 以下两个属性是组合使用的，意思是将被代理的微服务的 context-path，home-page-url-path 去掉（即 prefix 指定的路径，会替换掉服务的原路径）
  # 而 strip-prefix 则代表转发请求时，是否去掉 zuul 的代理前缀
  # 以下两个是全局的配置。如果是针对某个服务的前缀设置，则需要放在 routes 的唯一标识符下，使用 path + stripPrefix 组合
  prefix: /micro
  strip-prefix: false

  host:
    maxTotalConnections: 200
    maxPerRouteConnections: 20
    connect-timeout-millis: 2000
    socket-timeout-millis: 10000
  # 指定路由 Hystrix隔离模式的策略，为线程。默认是信号量
  ribbonIsolationStrategy: THREAD


# 指定 zuul 代理某个集群的负载均衡及熔断的策略（也可用于配置超时策略，防止文件过大时，上传时间超时）
hystrix:
  command:
    # default全局有效，service id 指定应用有效（microservice-provider-dept）
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 60000

microservice-provider-dept:
  ribbon:
    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList
    listOfServers: http://localhost:8001,http://localhost:8002,http://localhost:8003
    ConnectTimeout: 1000
    ReadTimeout: 3000
    MaxTotalHttpConnections: 500
    MaxConnectionsPerHost: 100

# 配置 zuul 的超时策略，防止文件过大时，上传时间超时（在 microservice-config-client 服务）
# 当不指定 service id 时，则代表全局有效。若指定，则代表对指定应用有效
ribbon:
  ConnectTimeout: 3000
  ReadTimeout: 60000
  SocketTimeout: 30000

logging:
  level:
    root: info
    com.netflix: debug
