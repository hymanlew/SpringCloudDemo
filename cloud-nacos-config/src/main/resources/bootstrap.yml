
# 以下配置必须要放在本文件下，否则无法启动，因为加载不到配置信息
spring:
  application:
    name: config-center-7001

  profiles:
    active: dev

# SpringCloud-Alibaba Nacos Config 从 Nacos Config Server 中加载配置时，会匹配 dataId（dataId 表示 Nacos 中某个配置集的 id，
# 通常用于组织划分系统的配置集）。Nacos Config 不仅加载了默认的以下第一条的基础配置，还会加载 dataId 为 ${spring.application.name}
# -${profile}.${file-extension:properties} 的基础配置。这就为不同环境的切换提供了很好的支持。

  cloud:
    nacos:
      config:
#       如果配置的是域名，也要加上端口，即使监听的是 80 端口，也要写上
        server-addr: 127.0.0.1:8848

#       prefix 属性表示 Nacos 配置中心上的 dataId 前缀。
#       1，默认情况下，会去 Nacos 服务器上加载 dataId 以  ${spring.application.name}. ${file-extension:properties} 为前缀的基础配置。
#       即如果不指定则默认是 spring.application.name 的值，即读取默认的 bootstrap/application/spring-application-name.properties 文件。
#
#       2，如果明确指定了 dataId 前缀（即 prefix 属性），则会加载指定 dataId 的配置。
#       3，另外如果配置文件是使用 yml 格式，则需要在 bootstrap 文件中声明。默认是 properties 格式文件
#       4，在 nacos 实现中，dataId 默认规则是 ${prefix}-${spring.profile.active}.${file-extension 文件扩展}。
        prefix: myconfig
        file-extension: yaml

# Nacos Config 自定义 Namespace 和 group：
# 默认采用的是 public 和 DEFAULT_GROUP。Nacos 提供的数据模型 key 是由三元组来进行唯一确定的（Namespace（group（service/dataId）））。
#
# 1，其中，Namespace 用于解决多环境及多租户数据的隔离问题，比如在多套不同的环境下，可以根据指定的环境创建不同的 Namespace，实现多环境的
# 隔离，或者在多用户的场景中，每个用户可以维护自己的 Namespace，实现每个用户的配置数据和注册数据的隔离。需要注意的是，在不同的 Namespace
# 下，可以存在相同的 Group 或 dataId。

# 2，Group 是 Nacos 中用来实现 dataId 分组管理的机制，可以实现不同的 service/dataId 的隔离。对于 Group 的用法没有固定的规定，比如它可
# 以实现不同环境下的 dataId 分组，也可以实现不同应用或组件下使用相同配置类型的分组，比如 database_url。
# 官方建议是通过 Namespace 来区分不同的环境，而 Group 可以专注在业务层面的数据分组。最重要的还是提前做好规划，对 Namespace 和 Group 进
# 行基本的定调，避免使用上的混乱。
#
# 3，在 Namespace 控制台的命名空间下，创建一个命名空间。并在 bootstrap 中添加配置：spring.cloud.nacos.config.namespace=xxx，值就是命
# 名空间的 ID，可以在控制台界面中获取。

        namespace: 123abc

# 4，Group 不需要提前创建，只需要在创建时指定即可。在控制台新建配置界面中指定配置所属的 Group，并在 bootstrap 中添加配置：spring.cloud.nacos.config.group=xxx。

        group: test_group

# 5，dataId 是 Nacos 中某个配置集的 ID，通常用于组织划分系统的配置集。之前是通过配置文件的名字来进行配置划分的，也可以通过 java 包的全
# 路径来划分，主要取决于 dataId 的使用维度。
#
# Nacos Config 同样支持自动以 dataId 配置：
# spring.cloud.nacos.config.ext-config[n] 支持多个 dataId 的扩展配置，并且 n 的值越大，优先级越高。包含三个属性：dataId（指定 dataId，
# 并且必须要带文件的扩展名，支持 properties，yaml，json等），group（指定 dataId 所在的组），refresh（控制 dataId 在配置发生变更时，是
# 否动态刷新，默认是 false）。

# 通过自定义扩展的 dataId 配置，即可以解决多个应用的配置共享问题，也支持一个应用有多个配置文件的情况。需要注意的是，在 ext-config 和
# ${spring.application.name}. ${file-extension:properties} 都存在的情况下，优先级高的是后者。

        ext-config[0]:
          data-id: myconfig.yaml
          group: test_group
          refresh: true


# Nacos Config 针对配置管理提供了 4 种操作 CRUD，其中 API 的方式为：
# 获取（get）/nacos/v1/cs/configs，监听（post）/nacos/v1/cs/configs/listener，发布（post）/nacos/v1/cs/configs，删除（delete）/nacos/v1/cs/configs。

