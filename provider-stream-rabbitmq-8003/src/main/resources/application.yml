server:
  port: 8003

# 微服务化的核心就是将传统的一站式应用，根据业务拆分成一个个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务只
# 做一件事。从技术角度看就是一种小而独立的处理过程，类似进程概念，能够自行单独启动或销毁，并拥有自己独立的数据库。
spring:
  application:
    # 这个名字很重要，是注册到注册中心必须用到的，也是服务发现时用到的名字。并且必须要对外显露统一的服务实例名称，不能更改。
    name: microservice-provider-stream
  cloud:
    stream:
      # 此处配置要绑定的 rabbitmq 的服务信息
      binders:
        # 自定义的名称，用于 binding 绑定器的整合
        defaultRabbit:
          # 消息中间件的类型
          type: rabbit
          # 设置中间件相关的环境配置
          environment:
              spring:
                rabbitmq:
                  host: localhost
                  port: 5672
                  username: root
                  password: root
      # 中间件服务的整合处理
      bindings:
        # 输出通道的名称，即本服务是作为生产者
        output:
          # 表示要使用的目标 Exchange 的名称
          destination: studyExchange
          # 设置消息类型，本次为 json，文本则设置为 text/plain
          content-type: application/json
          # 设置要绑定的消息服务的具体设置
          binder: defaultRabbit

eureka:
  # 客户端注册进 eureka 服务列表内
  client:
    service-url:
#    单机版，只有一个注册中心时
#      defaultZone: http://localhost:7001/eureka
#     集群版，同时有多个注册中心时
      defaultZone: http://admin:admin@eureka7001:7001/eureka/,http://eureka7002:7002/eureka/,http://eureka7003:7003/eureka/
  instance:
    # 自定义在注册中心页面显示的微服务的名称
    instance-id: provider-stream-dept
    # 设置显示微服务名称链接的访问路径 IP 地址
    prefer-ip-address: true


# 自定义显示项目的描述信息，需要注意，要在父工程中进行资源访问的配置（resources 标签加 maven-resources-plugin 插件）
info:
  service:
    name: hyman-microservicecloud
    ipname: www.hyman.com
  build:
    artifactId: @project.artifactId@
    version: @project.version@
    description: @project.description@

